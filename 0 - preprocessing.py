{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Connected to oxford_behavioural_finance_task (Python 3.11.13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "819f1967-ab32-4e6a-87d1-a3f7dc307e23",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "import argparse\n",
    "import os\n",
    "import requests\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "def download_datasets(personality_url, assets_url, supa_api_key):\n",
    "    \"\"\"\n",
    "    Download datasets from GitHub and Supabase, \n",
    "    merge them, and save all to CSV files.\n",
    "    \"\"\"\n",
    "    # Download personality dataset\n",
    "    print(\"Downloading personality dataset from GitHub...\")\n",
    "    df_personality = pd.read_csv(personality_url)\n",
    "    df_personality.to_csv(\"personality.csv\", index=False)\n",
    "\n",
    "    # Set up headers for Supabase API requests\n",
    "    headers = {\n",
    "            \"apikey\": supa_api_key,\n",
    "            \"Authorization\": f\"Bearer {supa_api_key}\",\n",
    "            \"Accept\": \"application/json\",\n",
    "        }\n",
    "\n",
    "    # Download assets dataset\n",
    "    print(\"Downloading assets dataset from Supabase...\")\n",
    "    resp = requests.get(assets_url, headers=headers, timeout=30)\n",
    "    resp.raise_for_status()\n",
    "    data = resp.json()\n",
    "    df_assets = pd.DataFrame(data)\n",
    "    df_assets.to_csv(\"assets.csv\", index=False)\n",
    "\n",
    "    # Merge datasets on the \"_id\" column\n",
    "    merged_df = pd.merge(df_personality, df_assets, on=\"_id\", how=\"outer\")\n",
    "    merged_df.to_csv(\"merged_dataset.csv\", index=False)\n",
    "\n",
    "def pre_process_datasets():\n",
    "    \"\"\"\n",
    "    Pre-process the datasets by removing unnecessary columns.\n",
    "    \"\"\"\n",
    "    # Load the merged dataset\n",
    "    df = pd.read_csv(\"merged_dataset.csv\")\n",
    "\n",
    "    # Drop unnecessary columns\n",
    "    df.drop(columns=columns_to_drop, inplace=True, errors='ignore')\n",
    "\n",
    "    # Save the cleaned dataset\n",
    "    df.to_csv(\"cleaned_dataset.csv\", index=False)\n",
    "    print(\"Pre-processing complete. Cleaned dataset saved as 'cleaned_dataset.csv'.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"merged_dataset.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(786, 11)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_id</th>\n",
       "      <th>confidence</th>\n",
       "      <th>risk_tolerance</th>\n",
       "      <th>composure</th>\n",
       "      <th>impulsivity</th>\n",
       "      <th>impact_desire</th>\n",
       "      <th>asset_allocation</th>\n",
       "      <th>asset_allocation_id</th>\n",
       "      <th>asset_currency</th>\n",
       "      <th>asset_value</th>\n",
       "      <th>created</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.550</td>\n",
       "      <td>0.510</td>\n",
       "      <td>0.565</td>\n",
       "      <td>0.161</td>\n",
       "      <td>0.999</td>\n",
       "      <td>Equities</td>\n",
       "      <td>39958838</td>\n",
       "      <td>USD</td>\n",
       "      <td>217.06</td>\n",
       "      <td>2025-02-25T09:18:34.158728+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.550</td>\n",
       "      <td>0.510</td>\n",
       "      <td>0.565</td>\n",
       "      <td>0.161</td>\n",
       "      <td>0.999</td>\n",
       "      <td>Commodities</td>\n",
       "      <td>83197857</td>\n",
       "      <td>GBP</td>\n",
       "      <td>159.05</td>\n",
       "      <td>2025-05-18T09:18:34.162165+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0.486</td>\n",
       "      <td>0.474</td>\n",
       "      <td>0.439</td>\n",
       "      <td>0.818</td>\n",
       "      <td>0.048</td>\n",
       "      <td>Cash</td>\n",
       "      <td>22575562</td>\n",
       "      <td>USD</td>\n",
       "      <td>231.12</td>\n",
       "      <td>2025-03-06T09:18:34.162165+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>0.486</td>\n",
       "      <td>0.474</td>\n",
       "      <td>0.439</td>\n",
       "      <td>0.818</td>\n",
       "      <td>0.048</td>\n",
       "      <td>Cash</td>\n",
       "      <td>85329037</td>\n",
       "      <td>USD</td>\n",
       "      <td>321.75</td>\n",
       "      <td>2025-02-22T09:18:34.163356+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>0.565</td>\n",
       "      <td>0.568</td>\n",
       "      <td>0.578</td>\n",
       "      <td>0.832</td>\n",
       "      <td>0.977</td>\n",
       "      <td>Crypto</td>\n",
       "      <td>66306997</td>\n",
       "      <td>USD</td>\n",
       "      <td>181.15</td>\n",
       "      <td>2025-04-17T09:18:34.163356+00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   _id  confidence  risk_tolerance  composure  impulsivity  impact_desire  \\\n",
       "0    1       0.550           0.510      0.565        0.161          0.999   \n",
       "1    1       0.550           0.510      0.565        0.161          0.999   \n",
       "2    2       0.486           0.474      0.439        0.818          0.048   \n",
       "3    2       0.486           0.474      0.439        0.818          0.048   \n",
       "4    3       0.565           0.568      0.578        0.832          0.977   \n",
       "\n",
       "  asset_allocation  asset_allocation_id asset_currency  asset_value  \\\n",
       "0         Equities             39958838            USD       217.06   \n",
       "1      Commodities             83197857            GBP       159.05   \n",
       "2             Cash             22575562            USD       231.12   \n",
       "3             Cash             85329037            USD       321.75   \n",
       "4           Crypto             66306997            USD       181.15   \n",
       "\n",
       "                            created  \n",
       "0  2025-02-25T09:18:34.158728+00:00  \n",
       "1  2025-05-18T09:18:34.162165+00:00  \n",
       "2  2025-03-06T09:18:34.162165+00:00  \n",
       "3  2025-02-22T09:18:34.163356+00:00  \n",
       "4  2025-04-17T09:18:34.163356+00:00  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['_id', 'confidence', 'risk_tolerance', 'composure', 'impulsivity',\n",
       "       'impact_desire', 'asset_allocation', 'asset_allocation_id',\n",
       "       'asset_currency', 'asset_value', 'created'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " _id\n",
      "274    5\n",
      "26     5\n",
      "47     5\n",
      "32     5\n",
      "285    5\n",
      "      ..\n",
      "40     1\n",
      "30     1\n",
      "34     1\n",
      "275    1\n",
      "298    1\n",
      "Name: count, Length: 297, dtype: int64\n",
      "\n",
      " confidence\n",
      "0.536    13\n",
      "0.501    11\n",
      "0.453    10\n",
      "0.507     9\n",
      "0.435     9\n",
      "         ..\n",
      "0.609     1\n",
      "0.515     1\n",
      "0.605     1\n",
      "0.627     1\n",
      "0.402     1\n",
      "Name: count, Length: 213, dtype: int64\n",
      "\n",
      " risk_tolerance\n",
      "0.461    16\n",
      "0.510    15\n",
      "0.532    15\n",
      "0.502    13\n",
      "0.518    13\n",
      "         ..\n",
      "0.429     1\n",
      "0.565     1\n",
      "0.468     1\n",
      "0.520     1\n",
      "0.492     1\n",
      "Name: count, Length: 178, dtype: int64\n",
      "\n",
      " composure\n",
      "0.457    16\n",
      "0.485    13\n",
      "0.524    13\n",
      "0.426    12\n",
      "0.525    12\n",
      "         ..\n",
      "0.572     1\n",
      "0.631     1\n",
      "0.390     1\n",
      "0.459     1\n",
      "0.501     1\n",
      "Name: count, Length: 184, dtype: int64\n",
      "\n",
      " impulsivity\n",
      "0.617    11\n",
      "0.868    10\n",
      "0.489     8\n",
      "0.872     7\n",
      "0.507     7\n",
      "         ..\n",
      "0.316     1\n",
      "0.202     1\n",
      "0.444     1\n",
      "0.677     1\n",
      "0.651     1\n",
      "Name: count, Length: 253, dtype: int64\n",
      "\n",
      " impact_desire\n",
      "0.668    10\n",
      "0.695     9\n",
      "0.624     9\n",
      "0.806     8\n",
      "0.404     8\n",
      "         ..\n",
      "0.931     1\n",
      "0.142     1\n",
      "0.146     1\n",
      "0.011     1\n",
      "0.844     1\n",
      "Name: count, Length: 249, dtype: int64\n",
      "\n",
      " asset_allocation\n",
      "Crypto         267\n",
      "Equities       137\n",
      "Bonds          128\n",
      "Real Estate     97\n",
      "Commodities     80\n",
      "Cash            77\n",
      "Name: count, dtype: int64\n",
      "\n",
      " asset_allocation_id\n",
      "39958838    1\n",
      "83197857    1\n",
      "22575562    1\n",
      "85329037    1\n",
      "66306997    1\n",
      "           ..\n",
      "18806960    1\n",
      "80368504    1\n",
      "17734634    1\n",
      "36724061    1\n",
      "63276690    1\n",
      "Name: count, Length: 786, dtype: int64\n",
      "\n",
      " asset_currency\n",
      "AUD    168\n",
      "JPY    162\n",
      "USD    160\n",
      "EUR    152\n",
      "GBP    144\n",
      "Name: count, dtype: int64\n",
      "\n",
      " asset_value\n",
      "152.07    2\n",
      "220.52    2\n",
      "264.47    2\n",
      "213.53    2\n",
      "126.76    2\n",
      "         ..\n",
      "196.60    1\n",
      "285.53    1\n",
      "193.70    1\n",
      "236.04    1\n",
      "342.45    1\n",
      "Name: count, Length: 779, dtype: int64\n",
      "\n",
      " created\n",
      "2025-03-24T09:18:34.167642+00:00    13\n",
      "2025-05-17T09:18:34.167642+00:00    11\n",
      "2025-05-12T09:18:34.167642+00:00    10\n",
      "2025-03-13T09:18:34.167642+00:00     9\n",
      "2025-03-23T09:18:34.167642+00:00     9\n",
      "                                    ..\n",
      "2025-04-10T09:18:34.184962+00:00     1\n",
      "2025-02-24T09:18:34.184962+00:00     1\n",
      "2025-04-30T09:18:34.184962+00:00     1\n",
      "2025-04-17T09:18:34.163356+00:00     1\n",
      "2025-02-22T09:18:34.163356+00:00     1\n",
      "Name: count, Length: 339, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "for c in df.columns:\n",
    "    print(f'\\n {df[c].value_counts()}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 786 entries, 0 to 785\n",
      "Data columns (total 11 columns):\n",
      " #   Column               Non-Null Count  Dtype  \n",
      "---  ------               --------------  -----  \n",
      " 0   _id                  786 non-null    int64  \n",
      " 1   confidence           786 non-null    float64\n",
      " 2   risk_tolerance       786 non-null    float64\n",
      " 3   composure            786 non-null    float64\n",
      " 4   impulsivity          786 non-null    float64\n",
      " 5   impact_desire        786 non-null    float64\n",
      " 6   asset_allocation     786 non-null    object \n",
      " 7   asset_allocation_id  786 non-null    int64  \n",
      " 8   asset_currency       786 non-null    object \n",
      " 9   asset_value          786 non-null    float64\n",
      " 10  created              786 non-null    object \n",
      "dtypes: float64(6), int64(2), object(3)\n",
      "memory usage: 67.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_id</th>\n",
       "      <th>confidence</th>\n",
       "      <th>risk_tolerance</th>\n",
       "      <th>composure</th>\n",
       "      <th>impulsivity</th>\n",
       "      <th>impact_desire</th>\n",
       "      <th>asset_allocation_id</th>\n",
       "      <th>asset_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>786.000000</td>\n",
       "      <td>786.000000</td>\n",
       "      <td>786.000000</td>\n",
       "      <td>786.000000</td>\n",
       "      <td>786.000000</td>\n",
       "      <td>786.000000</td>\n",
       "      <td>7.860000e+02</td>\n",
       "      <td>786.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>150.575064</td>\n",
       "      <td>0.503015</td>\n",
       "      <td>0.501001</td>\n",
       "      <td>0.504209</td>\n",
       "      <td>0.500894</td>\n",
       "      <td>0.489094</td>\n",
       "      <td>5.552039e+07</td>\n",
       "      <td>6498.967405</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>87.287256</td>\n",
       "      <td>0.102595</td>\n",
       "      <td>0.077551</td>\n",
       "      <td>0.071991</td>\n",
       "      <td>0.294382</td>\n",
       "      <td>0.281871</td>\n",
       "      <td>2.544535e+07</td>\n",
       "      <td>12972.079518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.176000</td>\n",
       "      <td>0.299000</td>\n",
       "      <td>0.311000</td>\n",
       "      <td>0.005000</td>\n",
       "      <td>0.006000</td>\n",
       "      <td>1.014580e+07</td>\n",
       "      <td>100.520000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>76.000000</td>\n",
       "      <td>0.432000</td>\n",
       "      <td>0.449000</td>\n",
       "      <td>0.455000</td>\n",
       "      <td>0.228000</td>\n",
       "      <td>0.237250</td>\n",
       "      <td>3.290018e+07</td>\n",
       "      <td>193.445000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>148.500000</td>\n",
       "      <td>0.505000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.502000</td>\n",
       "      <td>0.507000</td>\n",
       "      <td>0.497000</td>\n",
       "      <td>5.629742e+07</td>\n",
       "      <td>261.215000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>228.000000</td>\n",
       "      <td>0.565000</td>\n",
       "      <td>0.550750</td>\n",
       "      <td>0.547000</td>\n",
       "      <td>0.723500</td>\n",
       "      <td>0.718000</td>\n",
       "      <td>7.711335e+07</td>\n",
       "      <td>410.737500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>300.000000</td>\n",
       "      <td>0.885000</td>\n",
       "      <td>0.745000</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>0.997000</td>\n",
       "      <td>0.999000</td>\n",
       "      <td>9.994150e+07</td>\n",
       "      <td>47919.160000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              _id  confidence  risk_tolerance   composure  impulsivity  \\\n",
       "count  786.000000  786.000000      786.000000  786.000000   786.000000   \n",
       "mean   150.575064    0.503015        0.501001    0.504209     0.500894   \n",
       "std     87.287256    0.102595        0.077551    0.071991     0.294382   \n",
       "min      1.000000    0.176000        0.299000    0.311000     0.005000   \n",
       "25%     76.000000    0.432000        0.449000    0.455000     0.228000   \n",
       "50%    148.500000    0.505000        0.500000    0.502000     0.507000   \n",
       "75%    228.000000    0.565000        0.550750    0.547000     0.723500   \n",
       "max    300.000000    0.885000        0.745000    0.700000     0.997000   \n",
       "\n",
       "       impact_desire  asset_allocation_id   asset_value  \n",
       "count     786.000000         7.860000e+02    786.000000  \n",
       "mean        0.489094         5.552039e+07   6498.967405  \n",
       "std         0.281871         2.544535e+07  12972.079518  \n",
       "min         0.006000         1.014580e+07    100.520000  \n",
       "25%         0.237250         3.290018e+07    193.445000  \n",
       "50%         0.497000         5.629742e+07    261.215000  \n",
       "75%         0.718000         7.711335e+07    410.737500  \n",
       "max         0.999000         9.994150e+07  47919.160000  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe(include=np.number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>asset_allocation</th>\n",
       "      <th>asset_currency</th>\n",
       "      <th>created</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>786</td>\n",
       "      <td>786</td>\n",
       "      <td>786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Crypto</td>\n",
       "      <td>AUD</td>\n",
       "      <td>2025-03-24T09:18:34.167642+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>267</td>\n",
       "      <td>168</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       asset_allocation asset_currency                           created\n",
       "count               786            786                               786\n",
       "unique                6              5                               339\n",
       "top              Crypto            AUD  2025-03-24T09:18:34.167642+00:00\n",
       "freq                267            168                                13"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe(include=['O'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.int64(0)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['_id'] = df['_id'].astype('str')\n",
    "df['asset_allocation_id'] = df['asset_allocation_id'].astype('str')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_id</th>\n",
       "      <th>asset_allocation</th>\n",
       "      <th>asset_allocation_id</th>\n",
       "      <th>asset_currency</th>\n",
       "      <th>created</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>786</td>\n",
       "      <td>786</td>\n",
       "      <td>786</td>\n",
       "      <td>786</td>\n",
       "      <td>786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>297</td>\n",
       "      <td>6</td>\n",
       "      <td>786</td>\n",
       "      <td>5</td>\n",
       "      <td>339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>274</td>\n",
       "      <td>Crypto</td>\n",
       "      <td>39958838</td>\n",
       "      <td>AUD</td>\n",
       "      <td>2025-03-24T09:18:34.167642+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>5</td>\n",
       "      <td>267</td>\n",
       "      <td>1</td>\n",
       "      <td>168</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        _id asset_allocation asset_allocation_id asset_currency  \\\n",
       "count   786              786                 786            786   \n",
       "unique  297                6                 786              5   \n",
       "top     274           Crypto            39958838            AUD   \n",
       "freq      5              267                   1            168   \n",
       "\n",
       "                                 created  \n",
       "count                                786  \n",
       "unique                               339  \n",
       "top     2025-03-24T09:18:34.167642+00:00  \n",
       "freq                                  13  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe(include=['O'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>confidence</th>\n",
       "      <th>risk_tolerance</th>\n",
       "      <th>composure</th>\n",
       "      <th>impulsivity</th>\n",
       "      <th>impact_desire</th>\n",
       "      <th>asset_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>786.000000</td>\n",
       "      <td>786.000000</td>\n",
       "      <td>786.000000</td>\n",
       "      <td>786.000000</td>\n",
       "      <td>786.000000</td>\n",
       "      <td>786.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.503015</td>\n",
       "      <td>0.501001</td>\n",
       "      <td>0.504209</td>\n",
       "      <td>0.500894</td>\n",
       "      <td>0.489094</td>\n",
       "      <td>6498.967405</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.102595</td>\n",
       "      <td>0.077551</td>\n",
       "      <td>0.071991</td>\n",
       "      <td>0.294382</td>\n",
       "      <td>0.281871</td>\n",
       "      <td>12972.079518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.176000</td>\n",
       "      <td>0.299000</td>\n",
       "      <td>0.311000</td>\n",
       "      <td>0.005000</td>\n",
       "      <td>0.006000</td>\n",
       "      <td>100.520000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.432000</td>\n",
       "      <td>0.449000</td>\n",
       "      <td>0.455000</td>\n",
       "      <td>0.228000</td>\n",
       "      <td>0.237250</td>\n",
       "      <td>193.445000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.505000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.502000</td>\n",
       "      <td>0.507000</td>\n",
       "      <td>0.497000</td>\n",
       "      <td>261.215000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.565000</td>\n",
       "      <td>0.550750</td>\n",
       "      <td>0.547000</td>\n",
       "      <td>0.723500</td>\n",
       "      <td>0.718000</td>\n",
       "      <td>410.737500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>0.885000</td>\n",
       "      <td>0.745000</td>\n",
       "      <td>0.700000</td>\n",
       "      <td>0.997000</td>\n",
       "      <td>0.999000</td>\n",
       "      <td>47919.160000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       confidence  risk_tolerance   composure  impulsivity  impact_desire  \\\n",
       "count  786.000000      786.000000  786.000000   786.000000     786.000000   \n",
       "mean     0.503015        0.501001    0.504209     0.500894       0.489094   \n",
       "std      0.102595        0.077551    0.071991     0.294382       0.281871   \n",
       "min      0.176000        0.299000    0.311000     0.005000       0.006000   \n",
       "25%      0.432000        0.449000    0.455000     0.228000       0.237250   \n",
       "50%      0.505000        0.500000    0.502000     0.507000       0.497000   \n",
       "75%      0.565000        0.550750    0.547000     0.723500       0.718000   \n",
       "max      0.885000        0.745000    0.700000     0.997000       0.999000   \n",
       "\n",
       "        asset_value  \n",
       "count    786.000000  \n",
       "mean    6498.967405  \n",
       "std    12972.079518  \n",
       "min      100.520000  \n",
       "25%      193.445000  \n",
       "50%      261.215000  \n",
       "75%      410.737500  \n",
       "max    47919.160000  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe(include=np.number)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "oxford_behavioural_finance_task",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
